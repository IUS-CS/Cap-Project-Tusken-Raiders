{"version":3,"sources":["ng://ng-flexmonster/flexmonster.component.ts","ng://ng-flexmonster/flexmonster.module.ts"],"names":["FlexmonsterPivot","el","this","cellclick","EventEmitter","celldoubleclick","chartclick","dataerror","datafilecancelled","dataloaded","datachanged","fieldslistclose","fieldslistopen","filterclose","filteropen","drillthroughopen","exportcomplete","exportstart","drillthroughclose","fullscreen","loadingdata","loadinglocalization","loadingolapstructure","loadingreportfile","localizationerror","localizationloaded","olapstructureerror","olapstructureloaded","openingreportfile","printcomplete","printstart","querycomplete","queryerror","ready","reportchange","reportcomplete","reportfilecancelled","reportfileerror","reportfileloaded","runningquery","unauthorizederror","update","beforetoolbarcreated","beforegriddraw","aftergriddraw","afterchartdraw","root","prototype","ngOnInit","_this","flexmonster","Flexmonster","container","getElementsByClassName","componentFolder","width","height","toolbar","licenseKey","licenseFilePath","report","global","accessibility","shareReportConnection","customizeAPIRequest","customizeCell","customizeChartElement","customizeContextMenu","sortFieldsList","cell","next","event","done","Component","args","selector","template","ElementRef","Input","Output","FlexmonsterPivotModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';\r\nimport * as Flexmonster from 'flexmonster';\r\n\r\n@Component({\r\n  selector: 'fm-pivot',\r\n  template: '<div style=\"width:100%;height:100%;\"><div class=\"fm-ng-wrapper\"></div></div>'\r\n})\r\nexport class FlexmonsterPivot {\r\n  // params\r\n  @Input() toolbar: boolean;\r\n  @Input() licenseKey: string;\r\n  @Input() licenseFilePath: string;\r\n  @Input() width: string | number;\r\n  @Input() height: string | number;\r\n  @Input() componentFolder: string;\r\n  @Input() report: Flexmonster.Report | string;\r\n  @Input() shareReportConnection: Flexmonster.APIClientOptions;\r\n  @Input() global: Flexmonster.Report;\r\n  @Input() accessibility: Flexmonster.AccessibilityOptions;\r\n  @Input() customizeAPIRequest: (request: Object) => Object;\r\n  @Input() customizeCell: (cell: Flexmonster.CellBuilder, data: Flexmonster.CellData) => void;\r\n  @Input() customizeChartElement: (element: Element, data: Flexmonster.ChartData | Flexmonster.ChartLegendItemData) => void;\r\n  @Input() customizeContextMenu: (cell: Flexmonster.ContextMenuItem[], data: Flexmonster.CellData | Flexmonster.ChartData, viewType: string) => Flexmonster.ContextMenuItem[];\r\n  @Input() sortFieldsList: (first: Flexmonster.FieldsListSortingItem, second: Flexmonster.FieldsListSortingItem, fieldsListType: string) => number;\r\n\r\n  // events\r\n  @Output() cellclick: EventEmitter<Flexmonster.CellData> = new EventEmitter();\r\n  @Output() celldoubleclick: EventEmitter<Flexmonster.CellData> = new EventEmitter();\r\n  @Output() chartclick: EventEmitter<Flexmonster.ChartData> = new EventEmitter();\r\n  @Output() dataerror: EventEmitter<Flexmonster.ErrorEvent> = new EventEmitter();\r\n  @Output() datafilecancelled: EventEmitter<void> = new EventEmitter();\r\n  @Output() dataloaded: EventEmitter<void> = new EventEmitter();\r\n  @Output() datachanged: EventEmitter<Object> = new EventEmitter();\r\n  @Output() fieldslistclose: EventEmitter<void> = new EventEmitter();\r\n  @Output() fieldslistopen: EventEmitter<void> = new EventEmitter();\r\n  @Output() filterclose: EventEmitter<void> = new EventEmitter();\r\n  @Output() filteropen: EventEmitter<Object> = new EventEmitter();\r\n  @Output() drillthroughopen: EventEmitter<Flexmonster.CellData | Flexmonster.ChartData> = new EventEmitter();\r\n  @Output() exportcomplete: EventEmitter<void> = new EventEmitter();\r\n  @Output() exportstart: EventEmitter<void> = new EventEmitter();\r\n  @Output() drillthroughclose: EventEmitter<void> = new EventEmitter();\r\n  @Output() fullscreen: EventEmitter<void> = new EventEmitter();\r\n  @Output() loadingdata: EventEmitter<void> = new EventEmitter();\r\n  @Output() loadinglocalization: EventEmitter<void> = new EventEmitter();\r\n  @Output() loadingolapstructure: EventEmitter<void> = new EventEmitter();\r\n  @Output() loadingreportfile: EventEmitter<void> = new EventEmitter();\r\n  @Output() localizationerror: EventEmitter<void> = new EventEmitter();\r\n  @Output() localizationloaded: EventEmitter<void> = new EventEmitter();\r\n  @Output() olapstructureerror: EventEmitter<Flexmonster.ErrorEvent> = new EventEmitter();\r\n  @Output() olapstructureloaded: EventEmitter<void> = new EventEmitter();\r\n  @Output() openingreportfile: EventEmitter<void> = new EventEmitter();\r\n  @Output() printcomplete: EventEmitter<void> = new EventEmitter();\r\n  @Output() printstart: EventEmitter<void> = new EventEmitter();\r\n  @Output() querycomplete: EventEmitter<void> = new EventEmitter();\r\n  @Output() queryerror: EventEmitter<Flexmonster.ErrorEvent> = new EventEmitter();\r\n  @Output() ready: EventEmitter<Flexmonster.Pivot> = new EventEmitter();\r\n  @Output() reportchange: EventEmitter<void> = new EventEmitter();\r\n  @Output() reportcomplete: EventEmitter<void> = new EventEmitter();\r\n  @Output() reportfilecancelled: EventEmitter<void> = new EventEmitter();\r\n  @Output() reportfileerror: EventEmitter<void> = new EventEmitter();\r\n  @Output() reportfileloaded: EventEmitter<void> = new EventEmitter();\r\n  @Output() runningquery: EventEmitter<void> = new EventEmitter();\r\n  @Output() unauthorizederror: EventEmitter<Flexmonster.UnauthorizedErrorHandler> = new EventEmitter();\r\n  @Output() update: EventEmitter<void> = new EventEmitter();\r\n  @Output() beforetoolbarcreated: EventEmitter<Flexmonster.Toolbar> = new EventEmitter();\r\n  @Output() beforegriddraw: EventEmitter<Object> = new EventEmitter();\r\n  @Output() aftergriddraw: EventEmitter<Object> = new EventEmitter();\r\n  @Output() afterchartdraw: EventEmitter<void> = new EventEmitter();\r\n  // api\r\n  public flexmonster: Flexmonster.Pivot;\r\n  // private\r\n  private root: HTMLElement;\r\n\r\n  constructor(el: ElementRef) {\r\n    this.root = <HTMLElement>el.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.flexmonster = new Flexmonster({\r\n      container: this.root.getElementsByClassName('fm-ng-wrapper')[0],\r\n      componentFolder: this.componentFolder,\r\n      width: this.width,\r\n      height: this.height,\r\n      toolbar: this.toolbar,\r\n      licenseKey: this.licenseKey,\r\n      licenseFilePath: this.licenseFilePath,\r\n      report: this.report,\r\n      global: this.global,\r\n      accessibility: this.accessibility,\r\n      shareReportConnection: this.shareReportConnection,\r\n      customizeAPIRequest: this.customizeAPIRequest,\r\n      customizeCell: this.customizeCell,\r\n      customizeChartElement: this.customizeChartElement,\r\n      customizeContextMenu: this.customizeContextMenu,\r\n      sortFieldsList: this.sortFieldsList,\r\n      cellclick: (cell: Flexmonster.CellData) => this.cellclick.next(cell),\r\n      celldoubleclick: (cell: Flexmonster.CellData) => this.celldoubleclick.next(cell),\r\n      chartclick: (event: Flexmonster.ChartData) => this.chartclick.next(event),\r\n      datachanged: (event: Object) => this.datachanged.next(event),\r\n      dataerror: (event: Object) => this.dataerror.next(event),\r\n      datafilecancelled: () => this.datafilecancelled.next(),\r\n      dataloaded: () => this.dataloaded.next(),\r\n      fieldslistclose: () => this.fieldslistclose.next(),\r\n      fieldslistopen: () => this.fieldslistopen.next(),\r\n      filterclose: () => this.filterclose.next(),\r\n      filteropen: (event: Object) => this.filteropen.next(event),\r\n      drillthroughopen: (cell: Flexmonster.CellData | Flexmonster.ChartData) => this.drillthroughopen.next(cell),\r\n      exportcomplete: () => this.exportcomplete.next(),\r\n      exportstart: () => this.exportstart.next(),\r\n      drillthroughclose: () => this.drillthroughclose.next(),\r\n      loadingdata: () => this.loadingdata.next(),\r\n      loadinglocalization: () => this.loadinglocalization.next(),\r\n      loadingolapstructure: () => this.loadingolapstructure.next(),\r\n      loadingreportfile: () => this.loadingreportfile.next(),\r\n      localizationerror: () => this.localizationerror.next(),\r\n      localizationloaded: () => this.localizationloaded.next(),\r\n      olapstructureerror: (event: Flexmonster.ErrorEvent) => this.olapstructureerror.next(event),\r\n      olapstructureloaded: () => this.olapstructureloaded.next(),\r\n      openingreportfile: () => this.openingreportfile.next(),\r\n      printcomplete: () => this.printcomplete.next(),\r\n      printstart: () => this.printstart.next(),\r\n      querycomplete: () => this.querycomplete.next(),\r\n      queryerror: (event: Flexmonster.ErrorEvent) => this.queryerror.next(event),\r\n      ready: () => this.ready.next(this.flexmonster),\r\n      reportchange: () => this.reportchange.next(),\r\n      reportcomplete: () => this.reportcomplete.next(),\r\n      reportfileloaded: () => this.reportfileloaded.next(),\r\n      reportfilecancelled: () => this.reportfilecancelled.next(),\r\n      reportfileerror: () => this.reportfileerror.next(),\r\n      runningquery: () => this.runningquery.next(),\r\n      unauthorizederror: (done: Flexmonster.UnauthorizedErrorHandler) => this.unauthorizederror.next(done),\r\n      update: () => this.update.next(),\r\n      beforetoolbarcreated: (toolbar: Flexmonster.Toolbar) => this.beforetoolbarcreated.next(toolbar),\r\n      beforegriddraw: (event: Object) => this.beforegriddraw.next(event),\r\n      aftergriddraw: (event: Object) => this.aftergriddraw.next(event),\r\n      afterchartdraw: () => this.afterchartdraw.next()\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexmonsterPivot } from './flexmonster.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [FlexmonsterPivot],\r\n  exports: [FlexmonsterPivot]\r\n})\r\nexport class FlexmonsterPivotModule { }\r\n"]}