{"version":3,"file":"flexmonster.component.d.ts","sources":["flexmonster.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter } from '@angular/core';\r\nimport * as Flexmonster from 'flexmonster';\r\nexport declare class FlexmonsterPivot {\r\n    toolbar: boolean;\r\n    licenseKey: string;\r\n    licenseFilePath: string;\r\n    width: string | number;\r\n    height: string | number;\r\n    componentFolder: string;\r\n    report: Flexmonster.Report | string;\r\n    shareReportConnection: Flexmonster.APIClientOptions;\r\n    global: Flexmonster.Report;\r\n    accessibility: Flexmonster.AccessibilityOptions;\r\n    customizeAPIRequest: (request: Object) => Object;\r\n    customizeCell: (cell: Flexmonster.CellBuilder, data: Flexmonster.CellData) => void;\r\n    customizeChartElement: (element: Element, data: Flexmonster.ChartData | Flexmonster.ChartLegendItemData) => void;\r\n    customizeContextMenu: (cell: Flexmonster.ContextMenuItem[], data: Flexmonster.CellData | Flexmonster.ChartData, viewType: string) => Flexmonster.ContextMenuItem[];\r\n    sortFieldsList: (first: Flexmonster.FieldsListSortingItem, second: Flexmonster.FieldsListSortingItem, fieldsListType: string) => number;\r\n    cellclick: EventEmitter<Flexmonster.CellData>;\r\n    celldoubleclick: EventEmitter<Flexmonster.CellData>;\r\n    chartclick: EventEmitter<Flexmonster.ChartData>;\r\n    dataerror: EventEmitter<Flexmonster.ErrorEvent>;\r\n    datafilecancelled: EventEmitter<void>;\r\n    dataloaded: EventEmitter<void>;\r\n    datachanged: EventEmitter<Object>;\r\n    fieldslistclose: EventEmitter<void>;\r\n    fieldslistopen: EventEmitter<void>;\r\n    filterclose: EventEmitter<void>;\r\n    filteropen: EventEmitter<Object>;\r\n    drillthroughopen: EventEmitter<Flexmonster.CellData | Flexmonster.ChartData>;\r\n    exportcomplete: EventEmitter<void>;\r\n    exportstart: EventEmitter<void>;\r\n    drillthroughclose: EventEmitter<void>;\r\n    fullscreen: EventEmitter<void>;\r\n    loadingdata: EventEmitter<void>;\r\n    loadinglocalization: EventEmitter<void>;\r\n    loadingolapstructure: EventEmitter<void>;\r\n    loadingreportfile: EventEmitter<void>;\r\n    localizationerror: EventEmitter<void>;\r\n    localizationloaded: EventEmitter<void>;\r\n    olapstructureerror: EventEmitter<Flexmonster.ErrorEvent>;\r\n    olapstructureloaded: EventEmitter<void>;\r\n    openingreportfile: EventEmitter<void>;\r\n    printcomplete: EventEmitter<void>;\r\n    printstart: EventEmitter<void>;\r\n    querycomplete: EventEmitter<void>;\r\n    queryerror: EventEmitter<Flexmonster.ErrorEvent>;\r\n    ready: EventEmitter<Flexmonster.Pivot>;\r\n    reportchange: EventEmitter<void>;\r\n    reportcomplete: EventEmitter<void>;\r\n    reportfilecancelled: EventEmitter<void>;\r\n    reportfileerror: EventEmitter<void>;\r\n    reportfileloaded: EventEmitter<void>;\r\n    runningquery: EventEmitter<void>;\r\n    unauthorizederror: EventEmitter<Flexmonster.UnauthorizedErrorHandler>;\r\n    update: EventEmitter<void>;\r\n    beforetoolbarcreated: EventEmitter<Flexmonster.Toolbar>;\r\n    beforegriddraw: EventEmitter<Object>;\r\n    aftergriddraw: EventEmitter<Object>;\r\n    afterchartdraw: EventEmitter<void>;\r\n    flexmonster: Flexmonster.Pivot;\r\n    private root;\r\n    constructor(el: ElementRef);\r\n    ngOnInit(): void;\r\n}\r\n"]}