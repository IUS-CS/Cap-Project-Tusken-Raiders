import { ElementRef, EventEmitter } from '@angular/core';
import * as Flexmonster from 'flexmonster';
import * as ɵngcc0 from '@angular/core';
export declare class FlexmonsterPivot {
    toolbar: boolean;
    licenseKey: string;
    licenseFilePath: string;
    width: string | number;
    height: string | number;
    componentFolder: string;
    report: Flexmonster.Report | string;
    shareReportConnection: Flexmonster.APIClientOptions;
    global: Flexmonster.Report;
    accessibility: Flexmonster.AccessibilityOptions;
    customizeAPIRequest: (request: Object) => Object;
    customizeCell: (cell: Flexmonster.CellBuilder, data: Flexmonster.CellData) => void;
    customizeChartElement: (element: Element, data: Flexmonster.ChartData | Flexmonster.ChartLegendItemData) => void;
    customizeContextMenu: (cell: Flexmonster.ContextMenuItem[], data: Flexmonster.CellData | Flexmonster.ChartData, viewType: string) => Flexmonster.ContextMenuItem[];
    sortFieldsList: (first: Flexmonster.FieldsListSortingItem, second: Flexmonster.FieldsListSortingItem, fieldsListType: string) => number;
    cellclick: EventEmitter<Flexmonster.CellData>;
    celldoubleclick: EventEmitter<Flexmonster.CellData>;
    chartclick: EventEmitter<Flexmonster.ChartData>;
    dataerror: EventEmitter<Flexmonster.ErrorEvent>;
    datafilecancelled: EventEmitter<void>;
    dataloaded: EventEmitter<void>;
    datachanged: EventEmitter<Object>;
    fieldslistclose: EventEmitter<void>;
    fieldslistopen: EventEmitter<void>;
    filterclose: EventEmitter<void>;
    filteropen: EventEmitter<Object>;
    drillthroughopen: EventEmitter<Flexmonster.CellData | Flexmonster.ChartData>;
    exportcomplete: EventEmitter<void>;
    exportstart: EventEmitter<void>;
    drillthroughclose: EventEmitter<void>;
    fullscreen: EventEmitter<void>;
    loadingdata: EventEmitter<void>;
    loadinglocalization: EventEmitter<void>;
    loadingolapstructure: EventEmitter<void>;
    loadingreportfile: EventEmitter<void>;
    localizationerror: EventEmitter<void>;
    localizationloaded: EventEmitter<void>;
    olapstructureerror: EventEmitter<Flexmonster.ErrorEvent>;
    olapstructureloaded: EventEmitter<void>;
    openingreportfile: EventEmitter<void>;
    printcomplete: EventEmitter<void>;
    printstart: EventEmitter<void>;
    querycomplete: EventEmitter<void>;
    queryerror: EventEmitter<Flexmonster.ErrorEvent>;
    ready: EventEmitter<Flexmonster.Pivot>;
    reportchange: EventEmitter<void>;
    reportcomplete: EventEmitter<void>;
    reportfilecancelled: EventEmitter<void>;
    reportfileerror: EventEmitter<void>;
    reportfileloaded: EventEmitter<void>;
    runningquery: EventEmitter<void>;
    unauthorizederror: EventEmitter<Flexmonster.UnauthorizedErrorHandler>;
    update: EventEmitter<void>;
    beforetoolbarcreated: EventEmitter<Flexmonster.Toolbar>;
    beforegriddraw: EventEmitter<Object>;
    aftergriddraw: EventEmitter<Object>;
    afterchartdraw: EventEmitter<void>;
    flexmonster: Flexmonster.Pivot;
    private root;
    constructor(el: ElementRef);
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<FlexmonsterPivot, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<FlexmonsterPivot, "fm-pivot", never, { "toolbar": "toolbar"; "licenseKey": "licenseKey"; "licenseFilePath": "licenseFilePath"; "width": "width"; "height": "height"; "componentFolder": "componentFolder"; "report": "report"; "shareReportConnection": "shareReportConnection"; "global": "global"; "accessibility": "accessibility"; "customizeAPIRequest": "customizeAPIRequest"; "customizeCell": "customizeCell"; "customizeChartElement": "customizeChartElement"; "customizeContextMenu": "customizeContextMenu"; "sortFieldsList": "sortFieldsList"; }, { "cellclick": "cellclick"; "celldoubleclick": "celldoubleclick"; "chartclick": "chartclick"; "dataerror": "dataerror"; "datafilecancelled": "datafilecancelled"; "dataloaded": "dataloaded"; "datachanged": "datachanged"; "fieldslistclose": "fieldslistclose"; "fieldslistopen": "fieldslistopen"; "filterclose": "filterclose"; "filteropen": "filteropen"; "drillthroughopen": "drillthroughopen"; "exportcomplete": "exportcomplete"; "exportstart": "exportstart"; "drillthroughclose": "drillthroughclose"; "fullscreen": "fullscreen"; "loadingdata": "loadingdata"; "loadinglocalization": "loadinglocalization"; "loadingolapstructure": "loadingolapstructure"; "loadingreportfile": "loadingreportfile"; "localizationerror": "localizationerror"; "localizationloaded": "localizationloaded"; "olapstructureerror": "olapstructureerror"; "olapstructureloaded": "olapstructureloaded"; "openingreportfile": "openingreportfile"; "printcomplete": "printcomplete"; "printstart": "printstart"; "querycomplete": "querycomplete"; "queryerror": "queryerror"; "ready": "ready"; "reportchange": "reportchange"; "reportcomplete": "reportcomplete"; "reportfilecancelled": "reportfilecancelled"; "reportfileerror": "reportfileerror"; "reportfileloaded": "reportfileloaded"; "runningquery": "runningquery"; "unauthorizederror": "unauthorizederror"; "update": "update"; "beforetoolbarcreated": "beforetoolbarcreated"; "beforegriddraw": "beforegriddraw"; "aftergriddraw": "aftergriddraw"; "afterchartdraw": "afterchartdraw"; }, never, never>;
}

//# sourceMappingURL=flexmonster.component.d.ts.map